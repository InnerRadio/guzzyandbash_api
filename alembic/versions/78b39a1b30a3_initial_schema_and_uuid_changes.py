# Mako template for a new Alembic revision script

"""
Initial schema and UUID changes

Revision ID: 78b39a1b30a3
Revises: 405ad82dfcef
Create Date: 2025-06-10 02:00:49.255352

"""

# IMPORTS
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '78b39a1b30a3'
down_revision = '405ad82dfcef'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Temporarily disable foreign key checks
    op.execute('SET FOREIGN_KEY_CHECKS = 0;')

    # Step 1: Drop old tables if they exist.
    # These drop_table commands were removed as they did not exist in the database,
    # causing an error when attempting to drop them.
    # op.drop_table('user_user_types_association') # Removed
    # op.drop_table('user_user_type_link') # Removed

    # New: Drop user_user_type_options_association IF EXISTS to allow recreation
    op.execute("DROP TABLE IF EXISTS user_user_type_options_association;")


    # Step 2: Drop old columns from 'users' if they exist.
    # These drop_column commands were removed as they did not exist in the database,
    # causing an error when attempting to drop them.
    # op.drop_column('users', 'first_name') # Removed
    # op.drop_column('users', 'last_name') # Removed
    # op.drop_column('users', 'uuid') # Removed


    # Step 3: Handle users.id migration from INTEGER to VARCHAR(36) using raw SQL
    # This involves dropping primary key, altering type, then re-adding primary key
    op.execute('ALTER TABLE users DROP PRIMARY KEY;')
    op.execute('ALTER TABLE users MODIFY id VARCHAR(36) NOT NULL;')
    op.execute('ALTER TABLE users ADD PRIMARY KEY (id);')


    # Step 4: Add new columns to 'users' if they don't already exist.
    # These add_column commands were removed as the columns already existed in the database,
    # causing an error when attempting to add them.
    # op.add_column('users', sa.Column('full_name', sa.String(length=100), nullable=True)) # Removed
    # op.add_column('users', sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True)) # Removed


    # Step 5: Perform other column alterations (lengths, nullability) on existing tables/columns
    op.alter_column('user_type_options', 'description',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=1000),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.alter_column('user_type_options', 'is_active',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False,
               existing_server_default=sa.text("'1'"))
    op.alter_column('user_type_options', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_type_options', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))

    op.alter_column('users', 'username',
               existing_type=mysql.VARCHAR(length=255),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('users', 'bio',
               existing_type=mysql.VARCHAR(length=1000),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.alter_column('users', 'profile_picture_url',
               existing_type=mysql.VARCHAR(length=255),
               type_=sa.String(length=2048),
               existing_nullable=True)
    op.alter_column('users', 'social_links',
               existing_type=mysql.VARCHAR(length=1000),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.alter_column('users', 'permissions_level',
               existing_type=mysql.VARCHAR(length=255),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('users', 'affiliate_id',
               existing_type=mysql.VARCHAR(length=36),
               type_=sa.String(length=50),
               existing_nullable=True)

    # Step 6: Create the new association table (now that 'users.id' is compatible)
    # This operation will proceed only if the table does not exist.
    op.create_table('user_user_type_options_association',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('user_type_option_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_type_option_id'], ['user_type_options.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'user_type_option_id'),
    mysql_charset='utf8mb4', # Added this line
    mysql_collate='utf8mb4_0900_ai_ci' # Added this line
    )

    # Step 7: Re-enable foreign key checks
    op.execute('SET FOREIGN_KEY_CHECKS = 1;')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('SET FOREIGN_KEY_CHECKS = 0;')

    op.add_column('users', sa.Column('uuid', mysql.VARCHAR(length=36), nullable=False))
    op.add_column('users', sa.Column('last_name', mysql.VARCHAR(length=255), nullable=True))
    op.add_column('users', sa.Column('first_name', mysql.VARCHAR(length=255), nullable=True))
    # op.create_foreign_key(op.f('users_ibfk_1'), 'users', 'users', ['referring_affiliate_id'], ['id']) # This line was removed from upgrade
    op.create_index(op.f('uuid'), 'users', ['uuid'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.alter_column('users', 'affiliate_id',
               existing_type=sa.String(length=50),
               type_=mysql.VARCHAR(length=36),
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'is_active',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True,
               existing_server_default=sa.text("'1'"))
    op.alter_column('users', 'permissions_level',
               existing_type=sa.String(length=50),
               type_=mysql.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('users', 'social_links',
               existing_type=sa.String(length=500),
               type_=mysql.VARCHAR(length=1000),
               existing_nullable=True)
    op.alter_column('users', 'profile_picture_url',
               existing_type=sa.String(length=2048),
               type_=mysql.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('users', 'bio',
               existing_type=sa.String(length=500),
               type_=mysql.VARCHAR(length=1000),
               existing_nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.String(length=50),
               type_=mysql.VARCHAR(length=255),
               existing_nullable=False)
    # Revert users.id using raw SQL in downgrade
    op.execute('ALTER TABLE users DROP PRIMARY KEY;')
    op.execute('ALTER TABLE users MODIFY id INTEGER NOT NULL AUTO_INCREMENT;')
    op.execute('ALTER TABLE users ADD PRIMARY KEY (id);')

    op.drop_column('users', 'last_login_at')
    op.drop_column('users', 'full_name')
    op.alter_column('user_type_options', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    op.alter_column('user_type_options', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_type_options', 'is_active',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True,
               existing_server_default=sa.text("'1'"))
    op.alter_column('user_type_options', 'description',
               existing_type=sa.String(length=500),
               type_=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=1000),
               existing_nullable=True)
    op.create_table('user_user_type_link',
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_type_option_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_user_type_link_ibfk_1')),
    sa.ForeignKeyConstraint(['user_type_option_id'], ['user_type_options.id'], name=op.f('user_user_type_link_ibfk_2')),
    sa.PrimaryKeyConstraint('user_id', 'user_type_option_id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('user_user_types_association',
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_type_option_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_user_types_association_ibfk_1')),
    sa.ForeignKeyConstraint(['user_type_option_id'], ['user_type_options.id'], name=op.f('user_user_types_association_ibfk_2')),
    sa.PrimaryKeyConstraint('user_id', 'user_type_option_id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.drop_table('user_user_type_options_association')

    op.execute('SET FOREIGN_KEY_CHECKS = 1;')
    # ### end Alembic commands ###